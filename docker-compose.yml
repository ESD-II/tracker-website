services:
  # React App Container (unchanged)
  tracker_react:
    build:
      context: .
      dockerfile: Dockerfile.react
    container_name: tracker_react
    restart: always
#    ports:
#      - "8088:80"
    env_file:
      - .env
    volumes:
      - ./frontend:/workspace/frontend
      - ./frontend/node_modules:/workspace/frontend/node_modules
    networks:
      - traefik_network
#      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tennis-tracker-react.rule=Host(`TennisTracker.benjaminf.net`)"
      - "traefik.http.routers.tennis-tracker-react.entrypoints=websecure"
      - "traefik.http.routers.tennis-tracker-react.tls.certresolver=myresolver"
      - "traefik.http.services.tennis-tracker-react.loadbalancer.server.port=80" # Corrected earlier

  # Blender Container (unchanged)
  tracker_blender:
    build:
      context: .
      dockerfile: Dockerfile.blender
    container_name: tracker_blender
    env_file:
      - .env
    volumes:
      - ./config:/config
      - ./workspace:/workspace
    ports:
      - "55001:55001"
    restart: unless-stopped
    networks:
      - traefik_network
      - internal
    command: /workspace/startBlender.sh
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.blender.rule=Host(`blender.benjaminf.net`)"
      - "traefik.http.services.blender.loadbalancer.server.port=55001"

  tracker_mysql:
    image: mysql:8.0
    container_name: tracker_mysql
    restart: unless-stopped
    ports:
      - "3309:3306"
    env_file:
      - .env
    volumes:
      - ./data:/var/lib/mysql
      - ./my.cnf:/etc/mysql/my.cnf
    networks:
      - internal
      - traefik_network
      - bridge

  tracker_mqtt:
    build:
      context: .
      dockerfile: Dockerfile.mqtt
    container_name: tracker_mqtt
    restart: unless-stopped
    ports:
      - "1884:1883"
    volumes:
      - ./mqtt/config:/mosquitto/config
      - ./mqtt/data:/mosquitto/data
      - ./mqtt/log:/mosquitto/log
    networks:
      - internal
      - traefik_network
      - bridge

  tracker_redis:
    image: redis:7-alpine
    container_name: tracker_redis
    restart: unless-stopped
    networks:
      - internal
      - traefik_network

  tracker_django:
    build:
      context: .
      dockerfile: Dockerfile.django
    container_name: tracker_django
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      # Optional: Mount code for development hot-reloading (if needed)
      # - ./backend:/app/backend
      # Mount supervisor config if not copied in Dockerfile
      - ./backend/config:/app/backend/config
    networks:
      - internal
      - traefik_network
    depends_on:
      - tracker_mysql
      - tracker_redis
    labels:
      - "traefik.enable=true"

      # --- Define ONE service for the Django container ---
      - "traefik.http.services.tennis-tracker-django.loadbalancer.server.port=8000"

      # --- HTTP Router (API, Admin, Static) ---
      # Define the router that handles HTTP traffic
      - "traefik.http.routers.tennis-tracker-django-http.rule=Host(`TennisTracker.benjaminf.net`) && (PathPrefix(`/api`) || PathPrefix(`/admin`) || PathPrefix(`/static`))"
      - "traefik.http.routers.tennis-tracker-django-http.entrypoints=websecure"
      - "traefik.http.routers.tennis-tracker-django-http.tls.certresolver=myresolver"
      # --- Link HTTP router to the single service ---
      - "traefik.http.routers.tennis-tracker-django-http.service=tennis-tracker-django"

      # --- WebSocket Router ---
      # Define the router that handles WebSocket traffic
      - "traefik.http.routers.tennis-tracker-django-ws.rule=Host(`TennisTracker.benjaminf.net`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.tennis-tracker-django-ws.entrypoints=websecure"
      - "traefik.http.routers.tennis-tracker-django-ws.tls.certresolver=myresolver"
      # --- Link WebSocket router to the single service ---
      - "traefik.http.routers.tennis-tracker-django-ws.service=tennis-tracker-django"

networks:
  traefik_network:
    external: true
  internal:
    internal: true
  bridge:
    internal: false