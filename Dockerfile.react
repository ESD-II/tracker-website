# Stage 1: Build the frontend app
# Use a specific LTS version for better reproducibility
FROM node:20-alpine AS build

# Set the working directory inside the container
WORKDIR /frontend

# Copy package.json and package-lock.json first (for better caching)
# Assuming package-lock.json is used with npm ci
COPY ./frontend/package.json ./frontend/package-lock.json* ./
# Use npm ci for faster, cleaner installs based on lock file
RUN npm ci

# Copy the rest of the project files
COPY ./frontend /frontend

# --- Define ARG for build-time configuration ---
# Default values point to your production domain
ARG VITE_API_BASE_URL=https://tennistracker.benjaminf.net
ARG VITE_WS_BASE_URL=wss://tennistracker.benjaminf.net # Use wss:// for secure websockets

# --- Set ENV from ARG so the build process (Vite) can read them ---
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}
ENV VITE_WS_BASE_URL=${VITE_WS_BASE_URL}

# Build the frontend for production
# The build command reads the VITE_ prefixed ENV variables
RUN npm run build

# Stage 2: Use a lightweight static server to serve the production build
FROM nginx:alpine as server

# Copy the build files from the previous stage to the nginx container
# Make sure the source path (/frontend/dist) matches your build output directory
COPY --from=build /frontend/dist /usr/share/nginx/html

# Copy your custom nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80 (standard HTTP port Nginx listens on by default)
EXPOSE 80

# Start nginx to serve the app
CMD ["nginx", "-g", "daemon off;"]